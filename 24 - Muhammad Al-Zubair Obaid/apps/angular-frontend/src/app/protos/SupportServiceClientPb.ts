/**
 * @fileoverview gRPC-Web generated client stub for LaptopSupport
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v6.31.1
// source: support.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as support_pb from './support_pb'; // proto import: "support.proto"


export class SupportServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorInstallApps = new grpcWeb.MethodDescriptor(
    '/LaptopSupport.SupportService/InstallApps',
    grpcWeb.MethodType.SERVER_STREAMING,
    support_pb.InstallAppsRequest,
    support_pb.ProgressUpdate,
    (request: support_pb.InstallAppsRequest) => {
      return request.serializeBinary();
    },
    support_pb.ProgressUpdate.deserializeBinary
  );

  installApps(
    request: support_pb.InstallAppsRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<support_pb.ProgressUpdate> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/LaptopSupport.SupportService/InstallApps',
      request,
      metadata || {},
      this.methodDescriptorInstallApps);
  }

  methodDescriptorQuerySystemInfo = new grpcWeb.MethodDescriptor(
    '/LaptopSupport.SupportService/QuerySystemInfo',
    grpcWeb.MethodType.UNARY,
    support_pb.QuerySystemInfoRequest,
    support_pb.SystemInfoResponse,
    (request: support_pb.QuerySystemInfoRequest) => {
      return request.serializeBinary();
    },
    support_pb.SystemInfoResponse.deserializeBinary
  );

  querySystemInfo(
    request: support_pb.QuerySystemInfoRequest,
    metadata?: grpcWeb.Metadata | null): Promise<support_pb.SystemInfoResponse>;

  querySystemInfo(
    request: support_pb.QuerySystemInfoRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: support_pb.SystemInfoResponse) => void): grpcWeb.ClientReadableStream<support_pb.SystemInfoResponse>;

  querySystemInfo(
    request: support_pb.QuerySystemInfoRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: support_pb.SystemInfoResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/LaptopSupport.SupportService/QuerySystemInfo',
        request,
        metadata || {},
        this.methodDescriptorQuerySystemInfo,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/LaptopSupport.SupportService/QuerySystemInfo',
    request,
    metadata || {},
    this.methodDescriptorQuerySystemInfo);
  }

  methodDescriptorInstallEnvironment = new grpcWeb.MethodDescriptor(
    '/LaptopSupport.SupportService/InstallEnvironment',
    grpcWeb.MethodType.SERVER_STREAMING,
    support_pb.InstallEnvironmentRequest,
    support_pb.ProgressUpdate,
    (request: support_pb.InstallEnvironmentRequest) => {
      return request.serializeBinary();
    },
    support_pb.ProgressUpdate.deserializeBinary
  );

  installEnvironment(
    request: support_pb.InstallEnvironmentRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<support_pb.ProgressUpdate> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/LaptopSupport.SupportService/InstallEnvironment',
      request,
      metadata || {},
      this.methodDescriptorInstallEnvironment);
  }

}

export class AdminServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorRunCommand = new grpcWeb.MethodDescriptor(
    '/LaptopSupport.AdminService/RunCommand',
    grpcWeb.MethodType.UNARY,
    support_pb.RunCommandRequest,
    support_pb.RunCommandResponse,
    (request: support_pb.RunCommandRequest) => {
      return request.serializeBinary();
    },
    support_pb.RunCommandResponse.deserializeBinary
  );

  runCommand(
    request: support_pb.RunCommandRequest,
    metadata?: grpcWeb.Metadata | null): Promise<support_pb.RunCommandResponse>;

  runCommand(
    request: support_pb.RunCommandRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: support_pb.RunCommandResponse) => void): grpcWeb.ClientReadableStream<support_pb.RunCommandResponse>;

  runCommand(
    request: support_pb.RunCommandRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: support_pb.RunCommandResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/LaptopSupport.AdminService/RunCommand',
        request,
        metadata || {},
        this.methodDescriptorRunCommand,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/LaptopSupport.AdminService/RunCommand',
    request,
    metadata || {},
    this.methodDescriptorRunCommand);
  }

}

